{"name":"HybridWebApp Framework","tagline":"A framework to make life easier when creating Hybrid WebApps with Windows Phone 8, Windows Phone 8.1 and Windows 8.1","body":"## Beyond _website in a box_\r\nThe HybridWebApp Framework allows developers to more easily go beyond basic apps that do little more than display a website in a browser control. The framework makes this easy by facilitating the messaging channel between the native application and the website through a simple messaging protocol. \r\n\r\nAllowing the developer to take advantage of structured **bi-directional ** communication opens up more advanced integration with the host OS and the ability to get creative and do the following becomes significantly easier:\r\n* Dynamically replace the websites navigational structure with a native app structure\r\n* Pin interesting content via secondary tile (ie: recipe, album, tv series, etc)\r\n* Interact with OS features such as the [System Media Transport Controls](http://msdn.microsoft.com/en-us/library/windows/apps/windows.media.systemmediatransportcontrols.aspx) \r\n* Manipulate the DOM to add new buttons into the website that perform actions in the host app\r\n* Delegate Facebook Login to OS native UI (ie: [WebAuthenticationBroker](http://msdn.microsoft.com/en-us/library/windows/apps/windows.security.authentication.web.webauthenticationbroker.aspx))\r\n\r\n###Two ways to get started\r\n\r\n####Use the Toolkit\r\nFor convenience, the HybridWebApp Toolkit provides a reusable control that can be dropped into a new project in Visual Studio.\r\n\r\nTo install using NuGet: Install-Package HybridWebApp.Toolkit \r\n\r\nThen add a reference to `xmlns:toolkit=\"using:HybridWebApp.Toolkit.Controls\"` and the HybridWebView control in your XAML:\r\n```xml\r\n<Page\r\n    x:Class=\"MyHybridWebApp.MainPage\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    xmlns:local=\"using:MyHybridWebApp\"\r\n    xmlns:toolkit=\"using:HybridWebApp.Toolkit.Controls\"\r\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n    mc:Ignorable=\"d\">\r\n\r\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\r\n        <toolkit:HybridWebView WebUri=\"http://craigomatic.github.io/HybridWebApp-Framework\" MessageReceived=\"HybridWebView_MessageReceived\" CssResourcePath=\"ms-appx:///www/css/app.css\" JsResourcePath=\"ms-appx:///www/js/app.js\" />\r\n    </Grid>\r\n</Page>\r\n```\r\n\r\n```csharp\r\nprivate async void WebHost_MessageReceived(HybridWebView sender, ScriptMessage msg)\r\n{\r\n    switch (msg.Type)\r\n    {\r\n        case \"myCustomMessageType\":\r\n            {\r\n                var myCustomObject = JsonConvert.DeserializeObject<MyCustomObject>(msg.Payload);\r\n                break;\r\n            }\r\n    }\r\n}\r\n```\r\n####Use the Framework directly\r\nIf you'd like to go lower level you can install the framework itself directly and bypass the controls. Note that you will need an implementation of IScriptInvoker and IBrowser which [BrowserWrapper](https://github.com/craigomatic/HybridWebApp-Framework/blob/master/src/HybridWebApp.Toolkit/BrowserWrapper.cs) from the toolkit conveniently implements for you.\r\n\r\nTo install using NuGet: Install-Package HybridWebApp.Framework\r\n\r\n***\r\n\r\n\r\n### Authors and Contributors\r\nAuthored by @craigomatic\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}